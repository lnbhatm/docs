REFERENCES:

Job Control commands:  ps kill jobs bg fg http://linuxcommand.org/lts0080.php
                                          http://www.guru99.com/file-permissions.html

















Bash scripting
----------------------------------------------------------------------------------------------------
Change to root user :   sudo bash     or su 

Command to change the hostname  CMD: hostnamectl
hostnamectl
hostnamectl set-hostname --static "LAKSHMI"
dnf update
dnf install vim
exit to come-out from root

Clear Screen or terminal on linux : CMD clear
clear
Ctrl+L

UNIQUE CHARACTERS SECTION FEATURING TERMINAL CUSTOMIZATION AND HASH CHARACTER.
====================================================================================================
Special/unique charecter in bash has special meanings example: Characters Hash SemiColon.
special built-in meanings

# :- Comment liles.
     how interpret shell.
	 
	 vim first.sh    
	 vim is a text editor it will open the file if exists else creats.
	 
	 insert mode :  i or insert
	 
	 first line in the bash script
	 
	 #!/bin/bash  Please interpret this script as a bash script
	 
	 


echo command prints the text on the screen.
echo "Hi there how is it going what sort of day you are having?."  #this will print whatever to the screen.
comments are completly ignored by system.

escape
:wq
:q! quit without saving.

./first.sh permission denied.
ls -l   (no one has permission to execute)
chmod +x first.sh


Example: - echo "this is the example # blablabla"  here # is not interpreted as comment but
Example: - echo "this is the example" # blablabla  here # blablabla is commented.
or 
Example: - echo this is the example # blablabla  the also # blablabla is commented.


---------------------------------------------------------------------------------------------------
#!/bin/bash

name=tea
echo "The word $name contains ${#name} charecters"
---------------------------------------------------------------------------------------------------
OUTPUT:-
./first.sh 
The word tea contains 3 charecters

in this example # is not a comment but it returns the no of charecters in the given string.

---------------------------------------------------------------------------------------------------

Example: - # charecter used as a number system conversion. Binary to decimal 


---------------------------------------------------------------------------------------------------
#!/bin/bash

echo $(( 2#101))   #binary to decimal
echo $(( 8#101))   #octal  to decimal
echo $(( 16#101))  #hex   to decimal
---------------------------------------------------------------------------------------------------
OUTPUT:-
./first.sh 
5 
65
257
# binary/octal/hexadecimal  number converted as decimal value.
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
Special charecter ; is used to seperate commands in bash scripts.
---------------------------------------------------------------------------------------------------
Example:-
echo "I am fine today";echo "I will be fine tomorrow as well"
a=10
if [ $a -gt 0 ]; then echo "Condition is True";else echo "False condition"; fi

OUTPUT:
./first.sh 
I am fine today
I will be fine tomorrow as well
Condition is True


colon is used as command seperator in a line.
we can write multiple command in one line by sepearting the command using  ; 
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
Special charecter . is used to seperate commands in bash scripts.
---------------------------------------------------------------------------------------------------
cd .   here . means current directory.
cd ..  means to go back to previous directory.

ls -la  show hidden directory/files.
.     
.. 

single . usage example  cp  sourcepath .  copy to current directory.

----------------------------------------------------------------------------------------------------
partial quoting double quotes:  ""   
----------------------------------------------------------------------------------------------------
Example for the special charecter ""  double quotes


#!/bin/bash

colors="read black yellow green white"
#LOOP1
echo "output of loop1"
for col in $colors
do
	echo $col
done

#LOOP2
echo "output of loop2"
for col in "$colors"
do
	echo $col
done

----------------------------------------------------------------------------------------------------
OUTPUT:

./first.sh 
output of loop1
read
black
yellow
green
white
output of loop2
read black yellow green white  
[ double quotes used in this example for "$colors" prevented word splitting. and used as a single
  string ]
                              
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
Special Charecter:- single quotes  prevents all special charecters in a string litrally.
                    it does not allow variable referencing at all.
----------------------------------------------------------------------------------------------------
Example:-

#!/bin/bash

colors="read black yellow green white"
for col in '$colors'
do
	echo $col
done

OUTPUT:-
./second.sh 
$colors        

This example printed the litral value and variables are not referenced.
ignored all the special charecters in side the single quote.
as is.
----------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------
Linux commands
----------------------------------------------------------------------------------------------------

Linux is case sensitive.

cd     --> change working directory.
pwd    --> present working directory.
ls     --> list files/directory under a directory.
let    --> is the command works on airthmetic operator.


----------------------------------------------------------------------------------------------------
Charecter:  comma seperator  ,
----------------------------------------------------------------------------------------------------
Example:

			#!/bin/bash
			
			let "y=(( x=20,20/10))"
			echo $y

OUTPUT:
./second.sh 
2   

comma returns the value of last 
basically it links together a series some sort of airthmatic operations  they all will be evaluated 
but only the last operation is actually gets returned.
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
Charecter:  double comma
----------------------------------------------------------------------------------------------------
Example:

			#!/bin/bash
			
			var=DSLCoNnEction
			
			echo ${var,}
			echo ${var,,}


OUTPUT:
		./first.sh 
		dSLCoNnEction     with single comma only first letter is converted to lower case.
		dslconnection     with double comma complete strings are converted to lower case.


Lower case letter conversion
changes all charecters in a word to lowercase.

----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
Charecter:  Escap charecters or back slash  \
----------------------------------------------------------------------------------------------------
Example: Suppose we want output with quotes  Example print "Linux is awesome"

			#!/bin/bash

			echo "\"Linux is awesome\""

OUTPUT:
		"Linux is awesome"
		
		\ - ignores or escapes the quote from its special meanings.
		
Example2:

ls --help | grep "\-U"
                               use of --sort=none (-U) disables grouping
      --sort=WORD            sort by WORD instead of name: none (-U), size (-S),
  -U                         do not sort; list entries in directory order


In this example backslash ignores the meanings of the arguments to grep and considers as a string 
search -U  
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Charecter:  forward slash  /
----------------------------------------------------------------------------------------------------
slash is also used when the tab is pressed and auto completion is done.
Seperate the part of the filename.  cd /home/lakshmi/test/
used to exeute the executable with ./ 
airthmetic operation like divide : division

example:-  let val=500/2
           echo "$val"
OUTPUT:
			250
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
Charecter:  back quote : `
----------------------------------------------------------------------------------------------------
It basically acts as a some sort of substitution for something.
it takes the output of a command and it assigns to a variable.


Example:-  echo date
OUTPUT:
           date

Example
			echo `echo date`
OUTPUT:
			Sat Feb 18 08:52:49 PST 2017
			

Example:
			#!/bin/bash
			let val=500/2
			echo "$val"

			val2=`echo "$val"`
			echo $val2

OUTPUT:
			250
			250		

This will be useful to take the standard out and place it in a variable.			
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
Charecter: colon :
----------------------------------------------------------------------------------------------------
Gnerally do nothing operation. do none.


Example:
			#!/bin/bash
			var=200
			if [ $var -gt 100 ]
			then
			   :
			else
				echo $var
			fi

OUTPUT:
			
nothing will be on the screen as the condition is passed and : is executed and did nothing.			


colon can alse be using in conjection with the direction operator example to truncate file length.
to zero if the file exists. or if does not exists it will create it.

: > wood.txt   will empty the content of the file wood.txt as  do nothing is redirected to the file.

but if the file does not exist it will create empty file wood.txt
but if we have : >> then the file remains unchanged as we added nothing.
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
Charecter: exclamation mark !
----------------------------------------------------------------------------------------------------
This charecter is used to nagate or reverse some sort of condition or expression or exist status.

Example:-
			#!/bin/bash
			var=0
			if [ "$var" != 0 ] 
			then
			   echo "NOT"
			else
			   echo "YES"
			fi

OUTPUT:
			./first.sh 
			YES

	
Used as not equal to  (negation check.)
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Charecter: wildcard *
----------------------------------------------------------------------------------------------------
Example:
on the shell prompt
			touch test1 test2 test3 test4 test5

			now let's say we need to delete 100 + files starting with test/
			rm -rf test*
			all files with the charecters test and anything after that will be matched with * will 
			be deleted.		

whild card * is used to match everthing.

* is also used in mathematical operation for multiplication.
** is used as exponentiation   2 to the power 3  can be written as 2**3

Example:
			#!/bin/bash
			let var=100*10
			let var2=10**3
			echo "$var $var2"

OUTPUT:
			./example.sh 
			1000 1000


----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Charecter: Question Mark ?  
----------------------------------------------------------------------------------------------------
This would be test operator.  Similar to ternary operator in C program.

Example:-
			#!/bin/bash
			var1=10
			echo $((var2 = var1 < 20 ? 1:0 ))
			
OUTPUT:-
			./example.sh 
			1
			
if var1 is less than 20 is true so the output is 1 else 0.
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Charecter: Parentheses ( )
----------------------------------------------------------------------------------------------------
It is used to group commands inside of them.
It treats as subshell which script can not read.

Example:-
			#!/bin/bash
			var=5
			(var=10;)
			echo $var

			
OUTPUT:
			./example.sh 
			5
in this example (var=10;) is not interpreted to read by shell hence no change in the variable var=5

() is also used for array initialization.
  
weekdays=(sunday monday tuesday wednesday thursday friday saturday)
  
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Charecter: curly brackets {} or curly paranthesis
----------------------------------------------------------------------------------------------------
Examples :
#!/bin/bash
echo \${name,addrs,phone}\$
echo \"{name,addrs,phone}\"

OUTPUT
./example.sh 
$name$ $addrs$ $phone$
"name" "addrs" "phone"

using the flower bracket and escape charecters.


Taking contents of multiple files and put in to one single file.
cat command can be used to display the contents of the file.
Ans:-   cat {test1.txt,test2.txt,test3.txt} > allinone.txt

you can create a loop wihout a loop.

echo {0..9}  this will print 0 1 2 3 4 5 6 7 8 9 without using any looping construct.

curly braces can also be used to sepearting a piece of code. then can represent a block of code
it will create a function.

Example:-

			#!/bin/bash

			var1=1
			var2=2

			{
			var1=10
			var2=20
			}

			echo $var1 $var2
			
			
OUTPUT:- 
			./example.sh 
			10 20

here even though the variables are under the curly brace are visible to the script.

----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Charecter: Logical or || 
----------------------------------------------------------------------------------------------------
Example:
				#!/bin/bash
				var=1
				if [ "$var" -gt 0 ] || [ "$var" -eq 10 ]
				then
					echo "one of the condition is true"
				else
					echo "Both condition are false"
				fi

OUTPUT:
			one of the condition is true
used to combine 2 or more condition , if any one is true it will yeild true.
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Charecter: Logical and operation : && 
----------------------------------------------------------------------------------------------------
Example:-
				#!/bin/bash
				var=1
				if [ "$var" -gt 0 ] && [ "$var" -eq 10 ]
				then
					echo "Both conditions are true"
				else
					echo "One or more condition are false"
				fi
OUTPUT
				./example.sh 
				One or more condition are false

And logic is if all conditions returns True then if part will be executed, if any condition fails
else part will be executed.
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Charecter:  - (single - charecter) 
----------------------------------------------------------------------------------------------------
This charecter is used for optional prefix 
used as in option in some command.
arguments passed to some function.
-eq -lt -eq  
redirection standard input or output.
It can be used as minus sign or airthmetic involving subtraction.
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Charecter:  - + % / *  are all airthmetic operators.
----------------------------------------------------------------------------------------------------
Modulus opeartor example
#!/bin/bash
let var=5/4
echo $var

OUTPUT
1

Modulo operator gives the remainder of a division.
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Charecter: Tilda  ~  or home directory.
----------------------------------------------------------------------------------------------------
This is the shortcut used to go switch to the home directory of a current user.
it will take to home directory of a current user.

Example:
Command line type :     # cd ~
                        # pwd
						
root@ubuntu:~/lakshmi/scrips# pwd
/home/girish/lakshmi/scrips
root@ubuntu:~/lakshmi/scrips# cd ~
root@ubuntu:~# pwd
/home/girish
root@ubuntu:~# 


~+ : current working directory 
~- : previous directory.
Example
root@ubuntu:~/lakshmi/scrips# pwd
/home/girish/lakshmi/scrips
root@ubuntu:~/lakshmi/scrips# echo ~+
/home/girish/lakshmi/scrips
root@ubuntu:~/lakshmi/scrips# echo ~-
/home/girish
root@ubuntu:~/lakshmi/scrips# 
----------------------------------------------------------------------------------------------------
charecter: ^
----------------------------------------------------------------------------------------------------
This is used  in upper case conversion.

Example:
#!/bin/bash
var=inDian
echo ${var^}
echo ${var^^}

OUTPUT
./example.sh 
InDian
INDIAN

^ charecter used here converts the first letter to uppercase
^^ used here converts all case to uppper case. 

----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
BASH VARIABLES AND PARAMETERS IN BASH
----------------------------------------------------------------------------------------------------
Variables are some sort labels or names to represent certain values or sets of values to computers 
memory.
airthmatic operation
string phrasing
name of the variables are not same as the value of the variable.
Example:-
		#!/bin/bash
		var=10
		echo var
		echo $var

OUTPUT
		./example.sh 
		var
		10


Doller sign is not needed for assigning value to the variable during declaration.

Example
		#!/bin/bash
		var=10
		unset var
		echo var
		echo $var

OUTPUT
		./example.sh 
		var


unset command assigned value of the variable to none.


Example:

#!/bin/bash
var1=10
((var2=var1<10?1:0))
echo $var2

OUTPUT
./example.sh 
0
in this example doller sign prefix to the variable is not needed.
Example2
#!/bin/bash
var1=10
((var2=var1))
echo $var2
OUTPUT
./example.sh 
10
in this example doller sign prefix to the variable is not needed.


Assigning value to the variable using the standard input with read command.

Example:-
			#!/bin/bash
			echo "Enter some value"
			read var1
			echo "You have entered : $var1"
OUTPUT
			./example.sh 
			Enter some value
			Welcome
			You have entered : Welcome

Assigning a list of values to the variable used in a loop.

Example:
			#!/bin/bash
			for var in 1 2 3 4 5
			do
			echo $var
			done

OUTPUT
			1
			2
			3
			4
			5

The variable var gets the value 1 2 3 4 5 during each iteration of the for loop.
for var in 1 2 3 4 5 can be simplied as  for var in {1..5}
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
RETURN VALUES.
----------------------------------------------------------------------------------------------------
When the script is executed we should know the result of the script execution is sucessful or not.
exit status.  error message.
exist status can be obtained from :  $?  it is the status of the last executed command.
exit status of the last commad that is executed in a script.

Example for $?
		#!/bin/bash
		echo "This is the example"
		echo Return value: $?
		echo "Creating error condition"
		abdhdhdhdhd
		echo return value is: $?
OUTPUT
This is the example
Return value: 0
Creating error condition
./example.sh: line 6: abdhdhdhdhd: command not found
return value is: 127

if the command exeuction is sucessful then $? will return 0 if failed it will return positive integer
value in this case 127
127 is the value of the exist value.

$# - gives the number of commandline arguments passed to a script.
$0 - gives the name of the script.
basename -> removes the prefix to the filename path.

Example

			#!/bin/bash
			NO_OF_ARGS=2
			E_BADARGS=85
			E_UNREADABLE=86
			if [ $# -ne "$NO_OF_ARGS" ]
			then
			   echo "Usage ` basename $0` testfile1 testfile2"
			   exit $E_BADARGS
			fi

OUTPUT
Usage example.sh testfile1 testfile2
echo $?
85
here 85 is the value for the bad arguments.

in this example basename $0 gives the name of the script file executing.

====================================================================================================
TEST OPERATOR OR COMMAND.
====================================================================================================
TEST  : test - check file types and compare values      

SYNOPSIS
       test EXPRESSION
       test
       [ EXPRESSION ]
       [ ]
	   [[  ]]  SOME OLD BASH COMMAND.
       [ OPTION
DESCRIPTION: Exit with the status determined by EXPRESSION.

Note:-  An omitted EXPRESSION defaults to false.
        Example: 
		$  if [ ];then echo "True";else echo "False";fi
		OUTPUT:  False

FILE TESTS.
	-b FILE : FILE exists and is block special
    -c FILE : FILE exists and is character special            
    -d FILE : FILE exists and is a directory
    -e FILE : FILE exists
    -f FILE : FILE exists and is a regular file            
    -g FILE : FILE exists and is set-group-ID
    -G FILE : FILE exists and is owned by the effective group ID      
    -h FILE : FILE exists and is a symbolic link (same as -L)
    -k FILE : FILE exists and has its sticky bit set
    -L FILE : FILE exists and is a symbolic link (same as -h)
    -O FILE : FILE exists and is owned by the effective user ID
    -p FILE : FILE exists and is a named pipe
    -r FILE : FILE exists and read permission is granted
    -s FILE : FILE exists and has a size greater than zero
    -S FILE : FILE exists and is a socket
    -t FD   : FILE descriptor FD is opened on a terminal
    -u FILE : FILE exists and its set-user-ID bit is set
    -w FILE : FILE exists and write permission is granted
    -x FILE : FILE exists and execute (or search) permission is granted
	
STRING TESTS
    -n STRING  				: the length of STRING is nonzero      
    -z STRING  				: the length of STRING is zero
	STRING1 = STRING2  		: the strings are equal             
    STRING1 != STRING2		: the strings are not equal
	
INTEGER TESTS OR COMPARISON
	INTEGER1 -eq INTEGER2   : INTEGER1 is equal to INTEGER2
	INTEGER1 -ge INTEGER2   : INTEGER1 is greater than or equal to INTEGER2            
    INTEGER1 -gt INTEGER2   : INTEGER1 is greater than INTEGER2           
    INTEGER1 -le INTEGER2   : INTEGER1 is less than or equal to INTEGER2             
    INTEGER1 -lt INTEGER2   : INTEGER1 is less than INTEGER2             
    INTEGER1 -ne INTEGER2   : INTEGER1 is not equal to INTEGER2
              
FILE COMPARISON
	FILE1 -ef FILE2         : FILE1 and FILE2 have the same device and inode numbers
    FILE1 -nt FILE2         : FILE1 is newer (modification date) than FILE2
    FILE1 -ot FILE2         : FILE1 is older than FILE2
	
====================================================================================================
! reverses the result of the file test operation
$$ will give the process id of the script.
----------------------------------------------------------------------------------------------------
FILE PERMISSIONS.
----------------------------------------------------------------------------------------------------
chmod chown chgrp 
Linux uses the same permission scheme as Unix.
Permission :- Read Write Execute.
Execute: Run the file as a program.

To see the permission settings of a file 
ls -l <filename/direcroyname>

$ ls -l example.sh 
-rwxrwxrwx 1 root root 120 Mar  5 03:27 example.sh

Note:-
      OWNER GROUP OTHERS


Common setting for directory is :  755
Common setting for file default :  644



Number				Permission Type						Symbol
0					 No Permission						 ---
1					 Execute	                         --x
2					 Write	                             -w-
3					 Execute + Write	                 -wx
4					 Read	                             r--
5					 Read + Execute	                     r-x
6					 Read +Write	                     rw-
7					 Read + Write +Execute	             rwx


Symbolic Mode to set the permission

+	Adds a permission to a file or directory
-	Removes the permission
=	Sets the permission and overrides the permissions set earlier.


User Denotations
u   user/owner
g   group
o   other
a   all

change the user and group together using the command.
chown user:group

Ownership issue
In some case you want to grant permission to other user while keeping ownership to self.

s permission
is used to deal with this situations. s options is used to add both user ID and group ID permission to a file.

Sticky Bit Permissions
Sticky Bit is used for directories to protect files within them. 
Files in a directory with the sticky bit set can only be deleted or renamed by the 
root user or the owner of the directory.

http://www.computernetworkingnotes.com/managing-file-system-security/sticky-bit.html



----------------------------------------------------------------------------------------------------
File test opeartors
----------------------------------------------------------------------------------------------------
variables can hold path.
Example: To check the existance of a file.
		#!/bin/bash
		var=/home/girish/lakshmi/scrips/wood.txt
		if [[ -e $var ]]
		then
			echo "File exists"
		else
			echo "File does not exists!" 
		fi 


Example:  double parantheses.  ((..))
          if the result of an airthmetic expression is zero then the exit status is 1 or false
		  if the result of an airthmatic expression is not zero then the exit status is 0 or true
		  
			#!/bin/bash
			((2>1))
			echo Exit status: $?
			(( 2<1 ))
			echo Exit status: $?
			
OUTPUT
			./example.sh 
			Exit status: 0
			Exit status: 1 


----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
BUILT IN VARIABLES
----------------------------------------------------------------------------------------------------
echo $BASH
/bin/bash    
$BASH  gives the path of the bash program.
$BASH_VERSION  gives the current version of the bash program.
$PATH : gives series of path mentioned with the seperation of colon
$CDPATH
UID  user real id number. it is read only.
EUID Effective user id , it can be same as UID but not necessarliy the same.
ROOT_UID : root user will have the UID as 0 by default.

Fedora starts its numbering of regular user accounts at 500, while Ubuntu starts at 1000




Example: To print the processid of the current script.
				#!/bin/bash
				echo Processid: $$
OUTPUT
				./example.sh 
				Processid: 9114

htop  command will give the list of process details currently running.
      [ sudo apt-get install htop ]
	  it gives graphical view of the various process running.
top    				
Enter top on the bash shell and press q to quit.

echo $BASH_VERSION     OUTPUT: 4.3.46(1)-release

Example: $BASH_VERINFO

			#!/bin/bash
			for i in {0..5}
			do
			echo "BASH_INFO[$i]=${BASH_VERSINFO[$i]}"
			done
OUTPUT
			BASH_INFO[0]=4
			BASH_INFO[1]=3
			BASH_INFO[2]=46
			BASH_INFO[3]=1
			BASH_INFO[4]=release
			BASH_INFO[5]=i686-pc-linux-gnu

echo ${BASH_VERSINFO[@]}  will display the complete array.
4 3 46 1 release i686-pc-linux-gnu

echo $PATH
/home/girish/bin:/home/girish/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin        
echo -n means print on the same line and not go to second line.
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
SIMPLE FUNCTION
----------------------------------------------------------------------------------------------------
$FUNCNAME   is the inbuilt environment varable inside the user defined function gives the name of the function.
           Only works inside the function and not meant for outside.
Example:
				#!/bin/bash
				somefunction()
				{
				  echo "Some function is:($FUNCNAME)"
				}
				somefunction
				echo "Outside ,\$FUNCNAME = $FUNCNAME"
OUTPUT
				Some function is:(somefunction)
				Outside ,$FUNCNAME = 

----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
LOOPS
----------------------------------------------------------------------------------------------------
There are certain constructs which iterate certain times and does some sort of actions untill 

They are basically constructs repeat some sort of actions for a certain number of iterations that 
number of interation is usually defined some sort of a condition and  as long as that condition is true
itreates through list of commands executed.

we have three different loop construts in bash i.e 
for     loop
while   loop
until   loop

Also controlling loop through break and control command.
case and select construct.
which control the flow of commands execution.

Nested for loop : first innner most loop will be finished and then our loop will be executed.


IO Commands in bash

echo
read
printf - universal way outputting to standard console , these are used in programming language.
         can be applied very much almost all the program.

declare - declaring a variable.
example :- declare -r PI=3.14
Exammple:- declare and printf in bash

			#!/bin/bash
			declare -r PI=3.14
			printf "Second decimal of PI is : %2.6f\n", $PI
OUTPUT
			./example.sh 
			Second decimal of PI is : 3.140000	 

			
Example:
			#!/bin/bash
			a=10
			b=25
			c=18
			printf "a=%d b=%d c=%6.2f\n" $a $b $c

OUTPUT
			./example.sh
			a=10 b=25 c= 18.00			
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
REGULAR EXPRESSIONS
----------------------------------------------------------------------------------------------------
strings of characters , characters them self have the literal meanings, purpose of regular expression 
are search or manipulate text.
grep sed awk  commands are used to search texts and manipulate strings.

Input output redirections.

Files that are open by default are standard input / output /error files.
stdin  : read from the standard screen with file descriptor 0
stdout : display messages on the standard screen with file descriptor 1
stderr : display standard error messages on the standard screen with file descriptor 2


Redirection:   

standard input only redirection    1>test1.txt
standard output only redirection   2>test2.txt
standard error  only redirection   3>test3.txt

redirect standard output and error message as :  
build.sh > log.txt  2>&1


----------------------------------------------------------------------------------------------------
ADVANCED REDIRECTION EXAMPLE
----------------------------------------------------------------------------------------------------
#!/bin/bash
echo 12345 > fd.txt
exec 3<>fd.txt
read -n 2 <&3
echo -n . >&3
exec 3>&-
cat fd.txt
----------------------------------------------------------------------------------------------------
Explanation:-

echo 12345 > fd.txt  ->  we echo out 12345 and redirect in to a file fd.txt
exec 3<>fd.txt       ->  we open a file descriptor 3 and assign it to fd.txt
						open the fd.txt and assign a file descriptor  3 to it.						
read -n 2 <&3        -> we read only 2 characters from the file  
echo -n . >&3        -> we write a decimal point there.
exec 3>&-            -> we close the file descriptor fd3.
cat fd.txt           -> read the content of the file fd.txt

Reading 2 charecters from a file :  read -n 2 line < fd.txt
Reading file 

while read line; do echo $line; done < fd.txt
----------------------------------------------------------------------------------------------------

sudo su   # This command can be used in ubunto to login as super user.

----------------------------------------------------------------------------------------------------
*  READING A FILE LINE BY LINE USING THE FILE DESCRIPTOR.
----------------------------------------------------------------------------------------------------
exec 1000<>fd.xt
----------------------------------------------------------------------------------------------------


Functions:
Functions are very important chapter to larn, functions are something which you will commonly write and

Syntax:--

function_name ( )
{
 
 some set of commands to execute.
 
}

Function can also be written in a single line, in this case all commands inside the function needs to be 
sepeated by a semicolon.

function_name ( ) { command1;command2;command3;etc}

calling function in the example.  
note:- function must be defined before it is called.
       functions cannot be empty, however it can have 
       functions can be nested.but the function call should be the in the order for function defined.
       function name can be anything.

Empty function like below is not allowed.
function_name()
{

}
however function can have no operation command i.e colon as below.
function_name()
{
  :
}

----------------------------------------------------------------------------------------------------
Nested function example
----------------------------------------------------------------------------------------------------
#!/bin/bash

function1()
{
  echo "This is function:1"
  function2()
  {
    echo "This is function:2"
  }
}
function1     # must be called in the order it is nested.
function2
----------------------------------------------------------------------------------------------------
function can have any name.
----------------------------------------------------------------------------------------------------
#!/bin/bash
_()
{
  echo "Beging function: $FUNCNAME"

}
#calling function
_

OUTPUT:
Beging function: _
----------------------------------------------------------------------------------------------------
We can pass arguments to functions
value of arguments are assigned based on the position $1 $2 up to $9
----------------------------------------------------------------------------------------------------
#!/bin/bash
fun()
{
  echo "arg1=$1 arg2=$2"
}
var1=1
var2=100
fun $var1 $var2

OUTPUT:
arg1=1 arg2=100

note: in the function fun if you echo as echo "arg1=$3 arg2=$4"  Result will be empty becase of the
order of assignment is important.
----------------------------------------------------------------------------------------------------
Arrays.
----------------------------------------------------------------------------------------------------
Vi editor command
escape colon set number
escape colon set nonumber
delete range of lines:
escape colon 2,6d         # this command will delete lines from 2 to 6
escape colon 2,$d         # this command will delete lines from 2 to end of the file 
                          # $ takes the end of line.
----------------------------------------------------------------------------------------------------
for i in {0..100}; do echo "$i" >> example.sh ; done
----------------------------------------------------------------------------------------------------

#!/bin/bash
arr[0]=20
arr[1]=30
echo -e "Array Elements ${arr[0]}"
echo -e "Array Elements ${arr[1]}"

OUTPUT:
Array Elements 20
Array Elements 30

Array can be declared using declare keyword.
array initialization.


#!/bin/bash
a=something123
echo ${a[0]}
echo ${a[*]}
echo ${a[1]}
echo ${#a[@]}

OUTPUT:
something123
something123

1


${a[*]}       ===> This will list out all elements in an array.
echo ${a[0]}  ===> This will list the first element of the array  
${#a[@]}      ===> This will print the no of elements in the array  size of the array.



#!/bin/bash
arr=( zero one two )
echo ${arr[0]}
echo ${#arr[0]}
echo ${#arr[*]}
echo ${#arr[@]}

zero
4
3
3

---------------------------------------------------------------------------------------------------
Lists 
and and or list constructs
&&   And list
||   or list

expression1 && expression2   --->>  expression2 will be executed only if the expression1 returns True.
expression1 || expression2   --->>  expression2 will be executed if the expression1 returns False.

---------------------------------------------------------------------------------------------------
Debuging scripts.
---------------------------------------------------------------------------------------------------
sh -n <script name> does not run the script but checks the syntax of the script.
sh -v <script name>  verbose option for debugging.
sh -x <script name>  


Exammple:

#!/bin/bash
rm abc 2>/dev/null || echo "Error in $LINENO"
for i in 1 2 3
do
done

OUTPUT:-
Error in 2
./example.sh: line 5: syntax error near unexpected token `done'
./example.sh: line 5: `done'

or 

sh -n example.sh
example.sh: line 5: syntax error near unexpected token `done'
example.sh: line 5: `done'

This command does not execute the script but checks the syntax error.


Exammple for verbose option.

sh -v example.sh
#!/bin/bash
rm abc 2>/dev/null || echo "Error in $LINENO"
Error in 2
for i in 1 2 3
do
done
example.sh: line 5: syntax error near unexpected token `done'
example.sh: line 5: `done'


set -v can also be added inside the script.

Exammple:

#!/bin/bash
set -v
rm abc 2>/dev/null || echo "Error in $LINENO"
for i in 1 2 3
do
done

OUTPUT:

./example.sh
rm abc 2>/dev/null || echo "Error in $LINENO"
Error in 3
for i in 1 2 3
do
done
./example.sh: line 6: syntax error near unexpected token `done'
./example.sh: line 6: `done'


similarly -x can also be used for debugging the script for logical and syntax error.

---------------------------------------------------------------------------------------------------
https://www.youtube.com/watch?v=l0QGLMwR-lY
 
https://www.youtube.com/watch?v=IngllNs1pCU
https://www.youtube.com/watch?v=6hAeBJvAM2A
https://www.youtube.com/watch?v=dOCqHJ1i_Jw
https://www.youtube.com/watch?v=Aloc9UdhsC4

https://www.youtube.com/watch?v=bju_FdCo42w&list=PLtK75qxsQaMLZSo7KL-PmiRarU7hrpnwK

---------------------------------------------------------------------------------------------------
Q:  how will you know which kernel version is currently running on the linux system ?
A:  command  uname gives the information.
    uname -a 
	
Q:  how can you check a system's current IP address ?
    Command ifconfig gives the information about the IP address.	
	[loop back device, ethernet device]
	
	ifconfig
	ip addr show


Q: how do you check for free disk space?
   df -a
   df -ah  human redable format.
   
   
Q: how do you manage services on a system?
   service command
   ex: service udev status
   or systemd
   systemctl  status servicename
   
   
Q: how would you check the size of a directory's contents on  disk?
   du -sh   disk usage command.

   
Q: how would you check open ports on a linux machine?
   netstat 
   
   sudo netstat -tulpn
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 0.0.0.0:2049            0.0.0.0:*               LISTEN      -
tcp        0      0 0.0.0.0:55049           0.0.0.0:*               LISTEN      5649/rpc.mountd
tcp        0      0 0.0.0.0:139             0.0.0.0:*               LISTEN      5697/smbd
tcp        0      0 0.0.0.0:59630           0.0.0.0:*               LISTEN      4905/rpc.statd
tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      4886/portmap
tcp        0      0 0.0.0.0:35764           0.0.0.0:*               LISTEN      -
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      5484/sshd
tcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN      5568/cupsd
tcp        0      0 0.0.0.0:445             0.0.0.0:*               LISTEN      5697/smbd
tcp6       0      0 :::22                   :::*                    LISTEN      5484/sshd
udp        0      0 0.0.0.0:2049            0.0.0.0:*                           -
udp        0      0 15.213.119.76:137       0.0.0.0:*                           5695/nmbd
udp        0      0 0.0.0.0:137             0.0.0.0:*                           5695/nmbd
udp        0      0 15.213.119.76:138       0.0.0.0:*                           5695/nmbd
udp        0      0 0.0.0.0:138             0.0.0.0:*                           5695/nmbd
udp        0      0 0.0.0.0:35874           0.0.0.0:*                           4905/rpc.statd
udp        0      0 0.0.0.0:841             0.0.0.0:*                           4905/rpc.statd
udp        0      0 0.0.0.0:46168           0.0.0.0:*                           -
udp        0      0 0.0.0.0:5353            0.0.0.0:*                           5529/avahi-daemon:
udp        0      0 0.0.0.0:38762           0.0.0.0:*                           5649/rpc.mountd
udp        0      0 0.0.0.0:111             0.0.0.0:*                           4886/portmap
udp        0      0 0.0.0.0:44913           0.0.0.0:*                           5529/avahi-daemon:


Q: How do you check cpu usage for a process?   
   
   ps aux | grep "name of the process" 
   Learn pipe basics.
   top 
   htop  - gives graphical representaion.
   
   
Q: Dealing with mounting.
   ls /mnt/
   mount "mount address" "mount point"
   check the existing mount 
   mount
   /etc/fstab  contains the entry of mounted devices.
   
	# /etc/fstab: static file system information.
	#
	# <file system> <mount point>   <type>  <options>       <dump>  <pass>
	proc            /proc           proc    defaults        0       0
	# /dev/sda1
	UUID=e8d5bb05-3e5f-4302-b8c7-307acf7dfcf8 /               ext3    relatime,errors=remount-ro 0       1
	# /dev/sda5
	UUID=75731b2f-287b-49fe-8af1-81aa11d8b044 none  swap    sw         0       0
	#/dev/sda5  none  swap  sw  0  0
	#/dev/scd1       /media/cdrom0   udf,iso9660 user,noauto,exec,utf8 0       0
	#/dev/scd0       /media/cdrom1   udf,iso9660 user,noauto,exec,utf8 0       0
	#/dev/fd0        /media/floppy0  auto    rw,user,noauto,exec,utf8 0       0

   
Q: How do you look up something you don't know?
   man pages  : manual pages.
   man <command name>
   google
   stack overflow.   
   
   lsof   
   List open files.
   it gives list of all open files.
   
   look host
   netstat -tupln     
   curl localhost  
   which process has file open ?
   lsof /var/log/daemon.log
   COMMAND  PID   USER   FD   TYPE DEVICE SIZE   NODE NAME
   syslogd 5338 syslog    4w   REG    8,1    0 380346 /var/log/daemon.log
   
   Find all files that a process had opened?
   lsof -p < process id >
   lsof -p 27513
   
   /dev/null
   /dev/zero
   
   where is the binary for process X?
   lsof -p < process id > | grep bin
   
   which shared libraries has process X opened?
   lsof -p < process id > | grep .so
   
   lsof -p 27513 | grep .so | awk '{print $9}' | while read line;do basename $line; done
   lsof -p 27513 | grep bin | awk '{print $9}' | while read line;do echo $line; done
   lsof -p 27513 | grep .so | awk '{print $9}' | while read line;do echo $line; done
   
   which file is process x logging to ?
   
   lsof <library name>   To know more about the service status of the lib any hang etc.
   
   which files does user x has open?
   lsof -u <username> 
   lsof -u tbmbuild

   which process is listening on port X ( or using protocol Y) ?
   ls -i
   ls -i :80
   
   
   lsof -i tcp   
   lsof -i udp   

   
   
---------------------------------------------------------------------------------------------------
https://www.youtube.com/watch?v=k4Ww6gFeF0M
---------------------------------------------------------------------------------------------------
standard shell is sh  [ borne shell or bash shell]
bash shell is the default shell in the system.
command to get the current shell:   echo $0

Changing the shell.  (Bourne Shell, C shell, Korne shell  )
Exexution command is sh.
how to change the shell to kshel.
ksh  
exit is the command to be used to go back to the previous shell.
bash prompt is $
bash prompt syntax is sh.  (standard shell)

Shell script is nothing but collection of unix commands 
collection of bash commands bash shell
collection of dos commands does shell
collection of windows commands windows shell
collection of Linux commands Linux shell
collection of unix commands unix shell 

C   shell prompt % and execution Csh
K   shell prompt $          


system defined variables
User   defined variables

Script means weakly or loosely types programming   interpretr based 
programing languages are stricly typed programing syntax based. compiler based. 

export needs to be used to declare variable so that the variable is available to all the shells (bash,csh,ksh)
export is the key word used to make the global scope.
Unix is case sensitive operating system.
Environment variables in unix/linux
HOME
LOGNAME
USER
PS1           Primary prompt
PS2           Primary prompt
---------------------------------------------------------------------------------------------------    
Shell scripts are interactive and not interactive.   
---------------------------------------------------------------------------------------------------    
https://www.youtube.com/watch?v=-GnLLXPjLN4





---------------------------------------------------------------------------------------------------    
Advanced example.

create a folder for every month starting from 2012 to 2017
mkdir -p {2012..2017}-{01..12}
mkdir Account_{2016..2018}_{01..12}

Removing the folder creted above.
ls | grep -E [0-9]{4} | xargs rm -rvf
rm -rvf Account_201*
---------------------------------------------------------------------------------------------------    
aliasing.   setting one command to another command.
alias example.

alias ls=$(echo hi)

---------------------------------------------------------------------------------------------------   
https://www.youtube.com/watch?v=uqHjc7hlqd0

Command types in bash

1. File:  External Executable file.
2. Builtin command compiled in as part of bash
3. Keyword : Reserved syntactic word.
4. Function : user definable named compound commad
5. Alias: User definable, simple command substitution.

man bash
man man
help
help help


do done
while until for select
if case

Command Groups 
      Grouped list of commands, sharing any external redirections and whose return value is that of the list.
      (list) {list;}
	  
	  

while loop
-----------
while list1;do list2;done

Execute list1; if success, execute list2 and repeat.
continue until list1 returns a non zero status (fails).

  

until loop
-----------
until list1;do list2;done

Execute list1; if Failure, execute list2 and repeat.
continue until list1 returns a status 0 (success).

Reading line by line from a file 
while read line ; do echo $line;done < test.txt

i=0;
j=20
until [ $i -eq "$j" ]; do echo $i; let i=$i+1; done

c style for loop example

Syntax:
-------
for (( expr1; expr2; expr3 )); do <list>; done
Here
     expr1 - Initialization.
	 expr2 - Condition
	 expr3 - Increment/decrement.

j=20
for (( i=0;i<j;i++)); do echo $i; done

select loop  : specifically to get the user input.can be used to build some kind of menu system.


for loop syntax: 	

for <name> in <words>; do <list>;done 
Example:-

for i in red green yellow; do echo $i;done
<name> = i
<words> = red green yellow
<list> = echo $i

OUTPUT:-
$ for i in red green yellow; do echo $i;done
red
green
yellow


for loop is extremely useful can be used with files and directories.


SELECT LOOP

select <name> in <words>;do <list>;done;
This loop creates menu item for each <word> 
Each time the user makes a selection from menu, name is assigned 
the value of the selected word and REPLY is assigned the index number 
of the selection.
 
Example:-
#!/bin/bash
echo "Example for Select construct in Bash"
select menuopt in create insert update delete distroy quit;
do
    if [ "$menuopt" == "quit" ]; then
       echo "Exiting from main menu"
       exit
    elif [ "$menuopt" == "create" ]; then
       echo "Creating Database"
    elif [ "$menuopt" == "distroy" ]; then
       echo "distroy database"
    elif [ "$menuopt" == "insert" ]; then
       echo "inserting in to database"
    elif [ "$menuopt" == "delete" ]; then
       echo "delete database"
    fi
done

OUTPUT:

./exsel.sh 
Example for Select construct in Bash
1) create
2) insert
3) update
4) delete
5) distroy
6) quit
#? 6
Exiting from main menu
 
======================================================================================
									TESTS
======================================================================================
Evaluate conditional expression with the test builtin.
[Expression] or test

[[expression]]
  Evaluate conditional expression with the [[ keyword; word splitting is not performed.
  The right handside side of a string comparision ( == != )  is treated as pattern not quoted
  and a string when quoted.
  
  [[-n string ]]  string is non-empty.
  [[-z string ]]  string is empty
  [[ string1 == string2 ]]  string1 and string2 are the same
  [[ string1 != string2 ]]  string1 and string2 are not the same
  [[ string =~ regex ]] string matches the regular expression.
  [[ -f file ]]     file exists and file is a regular file.
  [[ -e file ]]  file exists 
  [[ -d file ]]  file is a directory.
  [[ -t fd  ]] fd is open and refers to a terminal
  
  
  
The test operator shown above can be used in if constructs.

======================================================================================
PATTERN MATCHING.
======================================================================================
Pattern matching is used in bash for the [[ and case keywords , path expansion and some types of
parameter expansion

*   matches strings including null.
?   matches any single charecter.
[charecter class] Matches any one of the charecters enclosed between [ and ].

[^]    matches complement (any charecter not in the class)
[x-z]  matches range of charecters from x to z
[[:class:]] matches according these to  POSIX classes.

alnum alpha ascii blank cntrl digit graph lower print punct space



Conditional Case

case <word> in 
    pattern1 )
	    list1;;
				
    pattern2 )
	    list2;;
		
	pattern3 | pattern4 )
	    list3;;
esac
	

Match <word> against each pattern sequentially When first match is found evaluate the list corresponding
to that match and stop matching.
| ( pipe ) charecter between two patterns entails a match if either pattern matches.( OR ). 


Example:-

#!/bin/bash

echo "Example for Select construct in Bash"
select menuopt in create insert update delete distroy quit;
do
    case $menuopt in
        
         quit ) echo "Exiting..."
                exit ;; 
          create ) echo "create" ;;
          insert ) echo "insert" ;;
          update ) echo "update" ;;
          delete ) echo "delete" ;;
          distroy) echo "distroy" ;;
     esac
done
======================================================================================
COMMAND GROUPS.
======================================================================================
Subshell:
Evaluate list of commands in a subshell, meaning that its environment is disctinct from the current
shell and its parameters are contained.
(list) <---- subshell 

Group command:
Evaluate list of commands in the current shell sharing the current shell's environment.
{ list; }  the spaces and trailing colon are obligatory.

Example:- subshell

x=2000; y=3000; ( x=10; y=20; echo "IN:x=$x y=$y"; ); echo "OUT:x=$x y=$y";

OUTPUT:
$ x=2000; y=3000; ( x=10; y=20; echo "IN:x=$x y=$y"; ); echo "OUT:x=$x y=$y";
IN:x=10 y=20
OUT:x=2000 y=3000

Running on the subshel so environment of subshell will be lost when the secession is closed.

Example:- Group commands.
x=2000; y=3000; { x=10; y=20; echo "IN:x=$x y=$y"; }; echo "OUT:x=$x y=$y";
OUTPUT:
$ x=2000; y=3000; { x=10; y=20; echo "IN:x=$x y=$y"; }; echo "OUT:x=$x y=$y";
IN:x=10 y=20
OUT:x=10 y=20
Running on the same shell so the environment is preserved.

======================================================================================
Example:-

( echo a; echo b ) | sort 

This command works becasue concatinating in sequence runs in that subshel.

$ echo "$(echo "$(ps wwf -s $$)")"
  PID TTY      STAT   TIME COMMAND
 5237 pts/4    Ss+    0:04 bash
 7480 pts/4    S+     0:00  \_ bash
 7481 pts/4    S+     0:00      \_ bash
 7482 pts/4    R+     0:00          \_ ps wwf -s 5237

 creates sub shell.
 $(command) -> execue command in a sushell.
 
 echo "$(</etc/os-release)"
 
===================================================================================================
REDIRECTION:
Controlling input,output,error and other streams.

list > file Overwrite/create file with output from list.
list >> file Append/create file with output from list.
list < file Feed file to list as input.

list1 | list2 Use output from list1 as input to list2 

if not specified the file descriptor (fd) then fd=1 (STDOUT) is assumed when redirecting output.
Aleternaive file desciptors may be specified by prepending the fd <number> eg 2>file to redirect 
fd 2 (STDERR)

To redirect to a file descriptor, append & and the fd number example 2>&1 to redirect STDERR to the
current target for STDOUT.
  
===================================================================================================
COMMAND AND PROCESS SUBSTITUTION
===================================================================================================
Command substitution:
        Replace the command substitution in-line with the output of its subshell.
		
		$(list)
		
Process substitution:
        Replace the process substitution with a file descriptor which is connected to the input or
		output of the subshell.
		
		>(list)     <(list)
		
		
		
===================================================================================================
PARAMETERS
===================================================================================================		
Positional parameters : $1 $2 $3 $4 $5 $6 $7 $8 $9 ${10}...
           parameters passed to command, encapsulating words on the command line as arguments.
		   
		   
Special Parameters:
           $* $@ $# $- $$ $0 $? $_ $!
		   parameters providing information about positional parameters,the current shell, and the
		   previous command.
		   
		   
Variables
                    name=string
    Parameters which may be assigned values by the user. there are also some special shell variables 
	which may provide information, toggle shell options, or configure certain features.
	          for variable assignment  = must not have adjacent spaces.
			  
			  
		
Iterator example:-		
echo \${1..9}         ->  $1 $2 $3 $4 $5 $6 $7 $8 $9
echo {10..20..1}      ->  10 11 12 13 14 15 16 17 18 19 20
echo {10..20..2}      ->  10 12 14 16 18 20
echo {a..z..3}        ->  a d g j m p s v y

	
		
		
		
====================================================================================================
SHELL SCRIPTING BASICS.		
====================================================================================================
BASIC COMMANDS
1. pwd
2. cd 
3. mkdir
4. cal 
   cal 2017
   cal jul 2017

5. date  command display the current date,time and timezone.
   $ date               --->  Sat Mar  4 05:56:13 PST 2017
   date custom command example:
   $ date '+%d-%m-%y'   --->  04-03-17
   $ date '+%H:%M:%y'   --->  05:56:17
 
6. touch command is used to create an empty text file. 
   touch file1.txt file2.txt file3.txt
   
   Quickway to create 100 empty text files 
   touch Empty_{1..100}.txt
   
7 cat command is used to create a text file , read and merge.
    
	 a) creating file.
	    cat > file1.txt
		<Enter some texts>
		Press control + D    (End of document.  comes back to shell prompt)
		
	 b)  cat < file1.txt to read the contents of the file.	
	     < symbol is not mandatory to read the file , file can be simply read using cat command as
		 cat filename.
		 
	 c)  merge 2 or more files using cat command as 
	 
	   cat file1 file2 .... fileN > mergedfile
	   
	   
8.  Rename Files & Directories : mv 
    mv source target 
9.  Delete Files & Directories : rm 
    rm -rvf file/directory  (recursively remove.)
	    v- verbose
		
	 rmdir <dirname>  also removes the directory specified.

10. copy files
    cp command is used to copy files from one location to another.
	cp source target.
	cp -r source target can copy complete directory recursively from source to target.

11. creating links
    soft link and hard links.
	ln command is used to create links.
	 
	creating hard link : replica of file/directory.
	ln oldfile newfile 
	
	soft link or symbolic lync. reference to the physical files/directroy.	
	ln -S file  linktofile
	
   
12. File permissions.
    Owner
	Group
	Others-user
	
	Read Write Execute-as program.    
	Default best value for a file is : 6  read and write.  [ 0-1-1 - Execute Write Read ]
    umask  command gives the output as 0022
    first   digit 0 ==> it is a octal number.	
    second  digit 0	==> 
    third   digit 2 ==> 
	fourth  digit 2 ==> 
	
	when the file is creted what linux does is it subtracts the value 666 for a file and 777 
	for a directoy  then we get 666-022=644 i.e the default value for a files.
    owner can read/write
    grouo can only read
    other users only can read.	
 
   
13. ls command used to see the contents of the directory.
    ls  -> displays files and directories in the current direcroy.
	ls $HOME  display the files and directories of home folder.
	
	a) get the file permission details.
	   ls -l     <display long lists>
	 
	 total 2
	-rwxrwxrwx 1 root root 649 Mar  4 05:33 exdate.sh
	-rwxrwxrwx 1 root root 408 Mar  4 01:06 exsel.sh
	-rwxrwxrwx 1 root root   0 Mar  4 06:26 old
	drwxrwxrwx 1 root root   0 Mar  4 06:32 wa
	
	- normal file d-directory  owner-rwx group rwx others rwx 

	
	b) displaying a hidden file.
	   creating hidden file 
	   touch .tempfile   < placing . at the begining of the file name creates hidden file.>
	   mv  myfile .myfile 
	   
	   to see the hidden files.
	   ls -a 

14   chmod  - change the file/directory permissions.
     Permissions are to specify what a particular person may or may not do with respect to a 
	 file or directory.
	 
	 Linux Permissions are 
		r read 		- you may view the contents of the file.
		w write 	- you may change the contents of the file.
		x execute 	- you may execute or run the file if it is a program or script.
		
	 For every file we define 3 sets of people for whom we may specify permissions.
	 
		owner - a single person who owns the file. 
		        ( typically the person who created the file 
				  but ownership may be granted to some one else by certain users )
				  
		group - every file belongs to a single group.
		
		others - everyone else who is not in the group or the owner.
		
		
	    Command to View the file permissions: ls -l [path]




    
     if execute permission is provided to directory then we can double click and get in to it.

15.  uname  - this command gives the computer details.       	 
	 uname -a
     Linux ubuntu 4.4.0-31-generic #50-Ubuntu SMP Wed Jul 13 00:06:14 UTC 2016 i686 i686 i686 GNU/Linux


16. file command.
      file a.txt 
      a.txt: ASCII text
      file gives the kind of the files in a directory.
	  
	  file /bin/bash 
      /bin/bash: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=1894fe5be87977e6a283ef5eadfb88f7e08b2d01, stripped
	  

17.  wc command --word count.
     wc a.txt 
     1  5 21 a.txt    [ < no of lines >   <no of words > < no of charecters > <name of the file>]	 
	 wc -l    < no of lines >
	 wc -w    < no of words >
	 wc -c    < no of charecters > 
	 
18. sort command - Used to sort texts.
    sort <file names.>
    by default alphanumeric sort	
	numeric sort can be done using sort -n 
	control+D to end of document when running from the terminal.
	
19. cut command  used to filtering text.
    cut uses by default tab as the seperaotr.
	
	Example:
	
	 create file with contents as below.
	 
	 # cat players 
		name  sport Age
		sachin cricker 42
		fed    tennies 37
		tiger  film 34
		dravid cric  45
		harsh swim 34
		karthik basket 13
		kobe   run 34
		
	 in this example we have spaces as delimiter and 3 field in each line.

     
     cut -d "" -f 1,2,3  players  display everthing 
	 cut -d "" -f 1 players        display only name field that is the first field.
      	 
     -d to specify the delimiter 
	 -f to select the range of the field needed.
	 
20.   Convert & Copy Files With 'dd'
     dd command is used for conversion.
	 Exammple: to convert all to uppercase letters.
	 
	 dd if=test of=test.out conv=ucase
	    if       --- input filename.
		of       --- output filename.
		conv     --- convert option.  ucase  = to convert all to upper case.
		                              lcase  = to convert all to lower case
									  
	dd can be used for many other useful conversion.
	
21. man command.
    help repository of linux commands.
	man cat
	man cal

22. banner 
   banner command is used to create a fancy text.
   banner "bye bye"
   Limitation:- prints only 10 charecter in a line.
   
23. compress command.
   1.create a huge text file 
     for i in {1..1000000}; do echo "blabla " >> test.in;done
   2.Compres the file using the compress commnad as below
     # compress -v test.in 
     test.in:  -- replaced with test.in.Z Compression: 99.77%
   3. ls
	  test.in.Z
	  
   4. to read the compressed file.
      zcat test.in.Z    [ normal cat command can not read the compresed file.]

24. input file creation for example.
    for i in {1..5000};do echo "blabla blabla blabla blabla  blabla blabla blabla blabla" >> test.in; done
	wc test.in 
    10000  80000 570000 test.in
	

25. Hello World!  example.
    
	echo command is used to display the stream of strings
	.sh extension is used to specify the shell script.
	
	Example:-
	echo "Hello world"	
	Comment in a shell script is achived by using # 
	# this is a comment.	
    # as the first charecter in the line for writing comments.
   
	by default the file created does not have execute permission hence we need to provide the
	execute permission chmod +x <script name>
	
26  Variables
    variable can hold strings or numbers.
	variable names are case sensitive.
	it can start with alphbetic charecter or _ it can not start with numbers.
	
	
27.  read command. - used to get the user input.
     echo command by default puts new line at the end.
	 to access the variable in the script we need to use $<variable name>

28.  expr or bc for mathematical expression.     
	 positional parameters are the system variables when the scripts are executed.
	 $1 is the first positional parameter.
	 
29  set command
    set command below assigns values to positiona parameters.
    set shell scripting is cool!
	echo $1 $2 $3  will print shell scripting is
	$*  --> matches all the positional parameter value and display everthing.
	============================================================================	
	Example:---
	root@ubuntu:~/wa# set a b c d e
	root@ubuntu:~/wa# echo $*
	a b c d e
	root@ubuntu:~/wa# echo $1
	a
	root@ubuntu:~/wa# echo $2
	b
	root@ubuntu:~/wa# echo $3
	c
	root@ubuntu:~/wa# echo $4
	d
	root@ubuntu:~/wa# echo $5
	e
	root@ubuntu:~/wa# echo $6

	root@ubuntu:~/wa# 
	============================================================================

30  Reverse Quotes Or Accent Graves  :  `   `
    will be used to execute the command within the command in linux.
	Example: to set the positional parameter from the text file using cat commnad.
	
	set `cat data.in`
	echo $1
	============================================================================
	root@ubuntu:~/wa# cat > data.in
	This is fine
	that is ok
	root@ubuntu:~/wa# 
	root@ubuntu:~/wa# 
	root@ubuntu:~/wa# set `cat data.in`
	root@ubuntu:~/wa# echo $1
	This
	root@ubuntu:~/wa# echo $2
	is
	root@ubuntu:~/wa# echo $4
	that
	root@ubuntu:~/wa# echo $3
	fine
	root@ubuntu:~/wa# echo $*
	This is fine that is ok
	root@ubuntu:~/wa# 
    ============================================================================
    

31  who am i   gives the details of who loggled in currently.
    In the latest linux system.
	
	root@ubuntu:~/wa# who
	linux    tty7         2017-03-04 22:33 (:0)
	name     terminal time.

    root@ubuntu:~/wa# set `who`
	root@ubuntu:~/wa# echo $1
	linux
	root@ubuntu:~/wa# echo $*
	linux tty7 2017-03-04 22:33 (:0)
	root@ubuntu:~/wa# 
	
	
32  Count number of command line arguments.
    no of positional parameters
	root@ubuntu:~/wa# set tom hanks is my favourite actor
	root@ubuntu:~/wa# echo $#
	6
	root@ubuntu:~/wa# 
	
	 $#  - gives the total number of possitional parameter is assigned.
	 
33.  Mathematical operations
     Airtmentic:
	 
	 Back slash -- Escape sequence.
	 
	 expr command needs to be used to inform the shell that evaluate mathematical expression.
	 #!/bin/bash

		#Airthmatic operation example
		a=100
		b=500
		c=70
		result=`expr $a + $b + $c`
		echo "sum of $a+$b+$c = $result"
     
	 OUTPUT:
	 # ./sample.sh 
     sum of 100+500+70 = 670
	 
	 Limitation of expr command is it can work only with integer values.

34.  Working with real numbers or floating point numbers.
     bc is the command for rela number airthmetic.
     
	 pipe is used to feed the output of one command to another command in linux.
	 The values are fed to bc by using the echo command and executed from there.
     we can mix both integer and floating point numbers to calculate.
	 
		#!/bin/bash
		#Floating point operation
		a=10.5
		b=90.5
		c=100.98
		d=24
		echo `echo $a + $b | bc`
		echo `echo $a + $b +$c +$d | bc`
		
	 OUTPUT:
	    $ ./float.sh 
			101.0
			225.98 
	
35.  Escape sequences.
     To modify the behaviour of echo command.
	 bunch of back slash charecters.
	 \n Escap sequence  :  newline
	 \r carriage return.
	 \b back space
	 \t tabs space.
	 
	 
	 Example:
		#!/bin/bash
		#Escape sequence example.
		echo -e "Line1\nLine2\nLine3"

	 OUTPUT:
			$ ./escape.sh 
			Line1
			Line2
			Line3
			
	
	Example: \r
	
	#!/bin/bash
	#Escape sequence example.
	echo -e "Line1\rLine2\rLine3"

	 OUTPUT:
	 ./escape.sh 
	 Line3					  --> Line3 overwrote Line1 and Line2 as the curser was returned.
	 
	 
	 Example: \t     tab charecter.
	 
		#!/bin/bash
		#Escape sequence example.
		echo -e "Line1\tLine2\tLine3"
		
	 OUTPUT: 
	 ./escape.sh 
	 Line1	Line2	Line3    [SEPERATED BY TAB SPACE.]
	 
	 Example : /b back space charecter.
	 
	 #!/bin/bash
		#Escape sequence example.
		echo -e "Line1 \bLine2 \bLine3"
		
	 OUTPUT: 
	 ./escape.sh
	 Line1Line2Line3     --> one one space are removed as back space is included.
	 
	 
	 
	 Example: Formatterd text bold color etc.
	 
	 #!/bin/bash
     #Escape sequence example.
     echo  -e "\033[1m Line1\tLine2 \tLine3\033[0m"
	 
	 OUTPUT:
	  Line1	Line2 	Line3   #will be in bold letters.
	  

36   tput command.
     formatted output. more controlled output.
	 
	 Example:-  tput clear     --> will clear the screen including the shell prompt.
		#!/bin/bash
		tput clear
		echo -e "rows:\c"
		tput lines
		echo -e "coloumn:\c"
		tput cols
		tput cup 15 20
		tput bold
		echo -e "This is bold"
		echo -e "Back to prompt"
		echo -e "\033[0m"
		
	 OUTPUT:
----------------------------------------------------------------------------------------------------
		rows:33
		coloumn:80













							This is bold
		Back to prompt

		linux@ubuntu:/mnt/hgfs/GitWa/bashscripts$ 
----------------------------------------------------------------------------------------------------	 
	 
37.  if [  ] 
     then
	 elif [ ]
	 then
	 else
	 fi
	 
38   Files  and files checks.
     block special / charecter text file. 

39.  Logical opearotor
	 AND OR NOT
	 And operator  : -a
	 OR  operator  : -o
	 NOT operaotor :  !
	 
	 
	    #!/bin/bash
		#Logical operator on Integer.
		a=40
		b=40
		c=400
		if [ $a -eq $b -a $a != $c ]
		then
		   echo "A is equal to B and  not equal to c"
		fi
		#on strings.
		firstrank="srichaitanya"
		secondrank="srichaitanya"
		thirdrank="srichaitanya"
		if [ "$firstrank" = "$secondrank" -a "$firstrank" =  "$thirdrank" ]
		then
		   echo "First Second and third rank achived by Srichaitanya"
		fi

	 
40   case example.
		#!/bin/bash
		echo "Enter a charecter: \c"
		read var
		case $var in
		[a-z] ) echo "Small case letter" ;;
		[A-Z] ) echo "Upper case letter" ;;
		[0-9] ) echo "You have entered digit" ;;
		?) echo "Special symbol" ;;
		*) echo "Default case match" ;;
		esac
	 

41   while loop , until loop and for loop
     control variable initalization
	 control variable under test condition.
	 control variable increment and decrement
	 
		#!/bin/bash
		count=1
		while [ $count -lt 10 ]
		do
		  echo $count;
		  count=`expr $count + 1`
		done
		
	 OUTPUT:
			./example.sh 
			1
			2
			3
			4
			5
			6
			7
			8
			9


     Until loop.
    =====================================	 
		#!/bin/bash
		count=1
		until [ $count -eq 10 ]
		do
		  echo $count;
		  count=`expr $count + 1`
		done
    =====================================
	 for item in *; do echo $item;done
	 
42. Real numbers or floating numbers are compared using string operation or by considring real 
    numbers as string.
	
	example:-
	
	 a=4.5
	 b=4.55
   
     if [ "$a" = "$b" ]
	 then
	  echo "Real numbers are equal"
	  else 
	       "Real numbers not equal"
	 fi
	 
43. 	 
	 
	 
	 
	 
	 

	 

	 

	 





    	 
	 

	 
    
 

    
	 

	 
	
	 
    	
	 
	 


      
  
		
		
		
		
		
		
		
		
		
		
		
		
		
		




























